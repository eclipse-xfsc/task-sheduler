// Code generated by goa v3.20.1, DO NOT EDIT.
//
// task HTTP client CLI support package
//
// Command:
// $ goa gen github.com/eclipse-xfsc/task-sheduler/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	healthc "github.com/eclipse-xfsc/task-sheduler/gen/http/health/client"
	taskc "github.com/eclipse-xfsc/task-sheduler/gen/http/task/client"
	tasklistc "github.com/eclipse-xfsc/task-sheduler/gen/http/task_list/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `task (create|task-result)
task-list (create|task-list-status)
health (liveness|readiness)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` task create --body "Dolores atque error ab." --task-name "Ipsam et est accusantium." --cache-namespace "Vel odio et doloribus est quod laborum." --cache-scope "Harum aut autem aliquam dolorem non soluta."` + "\n" +
		os.Args[0] + ` task-list create --body "Deserunt dolor et autem quidem fugiat sint." --task-list-name "Rerum quod error est esse nisi." --cache-namespace "Quaerat ut fugit voluptatem dolores deserunt in." --cache-scope "Et officiis aut."` + "\n" +
		os.Args[0] + ` health liveness` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		taskFlags = flag.NewFlagSet("task", flag.ContinueOnError)

		taskCreateFlags              = flag.NewFlagSet("create", flag.ExitOnError)
		taskCreateBodyFlag           = taskCreateFlags.String("body", "REQUIRED", "")
		taskCreateTaskNameFlag       = taskCreateFlags.String("task-name", "REQUIRED", "Task name.")
		taskCreateCacheNamespaceFlag = taskCreateFlags.String("cache-namespace", "", "")
		taskCreateCacheScopeFlag     = taskCreateFlags.String("cache-scope", "", "")

		taskTaskResultFlags      = flag.NewFlagSet("task-result", flag.ExitOnError)
		taskTaskResultTaskIDFlag = taskTaskResultFlags.String("task-id", "REQUIRED", "Unique task identifier.")

		taskListFlags = flag.NewFlagSet("task-list", flag.ContinueOnError)

		taskListCreateFlags              = flag.NewFlagSet("create", flag.ExitOnError)
		taskListCreateBodyFlag           = taskListCreateFlags.String("body", "REQUIRED", "")
		taskListCreateTaskListNameFlag   = taskListCreateFlags.String("task-list-name", "REQUIRED", "TaskList name.")
		taskListCreateCacheNamespaceFlag = taskListCreateFlags.String("cache-namespace", "", "")
		taskListCreateCacheScopeFlag     = taskListCreateFlags.String("cache-scope", "", "")

		taskListTaskListStatusFlags          = flag.NewFlagSet("task-list-status", flag.ExitOnError)
		taskListTaskListStatusTaskListIDFlag = taskListTaskListStatusFlags.String("task-list-id", "REQUIRED", "Unique taskList identifier.")

		healthFlags = flag.NewFlagSet("health", flag.ContinueOnError)

		healthLivenessFlags = flag.NewFlagSet("liveness", flag.ExitOnError)

		healthReadinessFlags = flag.NewFlagSet("readiness", flag.ExitOnError)
	)
	taskFlags.Usage = taskUsage
	taskCreateFlags.Usage = taskCreateUsage
	taskTaskResultFlags.Usage = taskTaskResultUsage

	taskListFlags.Usage = taskListUsage
	taskListCreateFlags.Usage = taskListCreateUsage
	taskListTaskListStatusFlags.Usage = taskListTaskListStatusUsage

	healthFlags.Usage = healthUsage
	healthLivenessFlags.Usage = healthLivenessUsage
	healthReadinessFlags.Usage = healthReadinessUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "task":
			svcf = taskFlags
		case "task-list":
			svcf = taskListFlags
		case "health":
			svcf = healthFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "task":
			switch epn {
			case "create":
				epf = taskCreateFlags

			case "task-result":
				epf = taskTaskResultFlags

			}

		case "task-list":
			switch epn {
			case "create":
				epf = taskListCreateFlags

			case "task-list-status":
				epf = taskListTaskListStatusFlags

			}

		case "health":
			switch epn {
			case "liveness":
				epf = healthLivenessFlags

			case "readiness":
				epf = healthReadinessFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "task":
			c := taskc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = taskc.BuildCreatePayload(*taskCreateBodyFlag, *taskCreateTaskNameFlag, *taskCreateCacheNamespaceFlag, *taskCreateCacheScopeFlag)
			case "task-result":
				endpoint = c.TaskResult()
				data, err = taskc.BuildTaskResultPayload(*taskTaskResultTaskIDFlag)
			}
		case "task-list":
			c := tasklistc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = tasklistc.BuildCreatePayload(*taskListCreateBodyFlag, *taskListCreateTaskListNameFlag, *taskListCreateCacheNamespaceFlag, *taskListCreateCacheScopeFlag)
			case "task-list-status":
				endpoint = c.TaskListStatus()
				data, err = tasklistc.BuildTaskListStatusPayload(*taskListTaskListStatusTaskListIDFlag)
			}
		case "health":
			c := healthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "liveness":
				endpoint = c.Liveness()
			case "readiness":
				endpoint = c.Readiness()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// taskUsage displays the usage of the task command and its subcommands.
func taskUsage() {
	fmt.Fprintf(os.Stderr, `Task service provides endpoints to work with tasks.
Usage:
    %[1]s [globalflags] task COMMAND [flags]

COMMAND:
    create: Create a task and put it in a queue for execution.
    task-result: TaskResult retrieves task result from the Cache service.

Additional help:
    %[1]s task COMMAND --help
`, os.Args[0])
}
func taskCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] task create -body JSON -task-name STRING -cache-namespace STRING -cache-scope STRING

Create a task and put it in a queue for execution.
    -body JSON: 
    -task-name STRING: Task name.
    -cache-namespace STRING: 
    -cache-scope STRING: 

Example:
    %[1]s task create --body "Dolores atque error ab." --task-name "Ipsam et est accusantium." --cache-namespace "Vel odio et doloribus est quod laborum." --cache-scope "Harum aut autem aliquam dolorem non soluta."
`, os.Args[0])
}

func taskTaskResultUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] task task-result -task-id STRING

TaskResult retrieves task result from the Cache service.
    -task-id STRING: Unique task identifier.

Example:
    %[1]s task task-result --task-id "Dolorem illo officiis ipsa impedit harum et."
`, os.Args[0])
}

// taskListUsage displays the usage of the task-list command and its
// subcommands.
func taskListUsage() {
	fmt.Fprintf(os.Stderr, `TaskList service provides endpoints to work with task lists.
Usage:
    %[1]s [globalflags] task-list COMMAND [flags]

COMMAND:
    create: Create a task list and corresponding tasks and put them in respective queues for execution.
    task-list-status: TaskListStatus retrieves a taskList status containing all tasks' unique IDs and statuses from the Cache service.

Additional help:
    %[1]s task-list COMMAND --help
`, os.Args[0])
}
func taskListCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] task-list create -body JSON -task-list-name STRING -cache-namespace STRING -cache-scope STRING

Create a task list and corresponding tasks and put them in respective queues for execution.
    -body JSON: 
    -task-list-name STRING: TaskList name.
    -cache-namespace STRING: 
    -cache-scope STRING: 

Example:
    %[1]s task-list create --body "Deserunt dolor et autem quidem fugiat sint." --task-list-name "Rerum quod error est esse nisi." --cache-namespace "Quaerat ut fugit voluptatem dolores deserunt in." --cache-scope "Et officiis aut."
`, os.Args[0])
}

func taskListTaskListStatusUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] task-list task-list-status -task-list-id STRING

TaskListStatus retrieves a taskList status containing all tasks' unique IDs and statuses from the Cache service.
    -task-list-id STRING: Unique taskList identifier.

Example:
    %[1]s task-list task-list-status --task-list-id "Facilis distinctio asperiores ut architecto ducimus."
`, os.Args[0])
}

// healthUsage displays the usage of the health command and its subcommands.
func healthUsage() {
	fmt.Fprintf(os.Stderr, `Health service provides health check endpoints.
Usage:
    %[1]s [globalflags] health COMMAND [flags]

COMMAND:
    liveness: Liveness implements Liveness.
    readiness: Readiness implements Readiness.

Additional help:
    %[1]s health COMMAND --help
`, os.Args[0])
}
func healthLivenessUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] health liveness

Liveness implements Liveness.

Example:
    %[1]s health liveness
`, os.Args[0])
}

func healthReadinessUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] health readiness

Readiness implements Readiness.

Example:
    %[1]s health readiness
`, os.Args[0])
}
