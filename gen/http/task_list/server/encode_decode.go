// Code generated by goa v3.20.1, DO NOT EDIT.
//
// taskList HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/eclipse-xfsc/task-sheduler/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"

	tasklist "github.com/eclipse-xfsc/task-sheduler/gen/task_list"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateResponse returns an encoder for responses returned by the
// taskList Create endpoint.
func EncodeCreateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*tasklist.CreateTaskListResult)
		enc := encoder(ctx, w)
		body := NewCreateResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateRequest returns a decoder for requests sent to the taskList
// Create endpoint.
func DecodeCreateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body any
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			taskListName   string
			cacheNamespace *string
			cacheScope     *string

			params = mux.Vars(r)
		)
		taskListName = params["taskListName"]
		cacheNamespaceRaw := r.Header.Get("x-cache-namespace")
		if cacheNamespaceRaw != "" {
			cacheNamespace = &cacheNamespaceRaw
		}
		cacheScopeRaw := r.Header.Get("x-cache-scope")
		if cacheScopeRaw != "" {
			cacheScope = &cacheScopeRaw
		}
		payload := NewCreateTaskListRequest(body, taskListName, cacheNamespace, cacheScope)

		return payload, nil
	}
}

// EncodeTaskListStatusResponse returns an encoder for responses returned by
// the taskList TaskListStatus endpoint.
func EncodeTaskListStatusResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*tasklist.TaskListStatusResponse)
		if res.Status == "failed" {
			enc := encoder(ctx, w)
			body := NewTaskListStatusMultiStatusResponseBody(res)
			w.WriteHeader(http.StatusMultiStatus)
			return enc.Encode(body)
		}
		if res.Status == "created" {
			enc := encoder(ctx, w)
			body := NewTaskListStatusCreatedResponseBody(res)
			w.WriteHeader(http.StatusCreated)
			return enc.Encode(body)
		}
		if res.Status == "pending" {
			enc := encoder(ctx, w)
			body := NewTaskListStatusAcceptedResponseBody(res)
			w.WriteHeader(http.StatusAccepted)
			return enc.Encode(body)
		}
		enc := encoder(ctx, w)
		body := NewTaskListStatusOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeTaskListStatusRequest returns a decoder for requests sent to the
// taskList TaskListStatus endpoint.
func DecodeTaskListStatusRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			taskListID string

			params = mux.Vars(r)
		)
		taskListID = params["taskListID"]
		payload := NewTaskListStatusRequest(taskListID)

		return payload, nil
	}
}

// marshalTasklistGroupStatusToGroupStatusResponseBody builds a value of type
// *GroupStatusResponseBody from a value of type *tasklist.GroupStatus.
func marshalTasklistGroupStatusToGroupStatusResponseBody(v *tasklist.GroupStatus) *GroupStatusResponseBody {
	if v == nil {
		return nil
	}
	res := &GroupStatusResponseBody{
		ID:     v.ID,
		Status: v.Status,
	}
	if v.Tasks != nil {
		res.Tasks = make([]*TaskStatusResponseBody, len(v.Tasks))
		for i, val := range v.Tasks {
			res.Tasks[i] = marshalTasklistTaskStatusToTaskStatusResponseBody(val)
		}
	}

	return res
}

// marshalTasklistTaskStatusToTaskStatusResponseBody builds a value of type
// *TaskStatusResponseBody from a value of type *tasklist.TaskStatus.
func marshalTasklistTaskStatusToTaskStatusResponseBody(v *tasklist.TaskStatus) *TaskStatusResponseBody {
	if v == nil {
		return nil
	}
	res := &TaskStatusResponseBody{
		ID:     v.ID,
		Status: v.Status,
	}

	return res
}
