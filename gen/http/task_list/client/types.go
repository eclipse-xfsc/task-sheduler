// Code generated by goa v3.20.1, DO NOT EDIT.
//
// taskList HTTP client types
//
// Command:
// $ goa gen github.com/eclipse-xfsc/task-sheduler/design

package client

import (
	tasklist "github.com/eclipse-xfsc/task-sheduler/gen/task_list"
	goa "goa.design/goa/v3/pkg"
)

// CreateResponseBody is the type of the "taskList" service "Create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// Unique taskList identifier.
	TaskListID *string `form:"taskListID,omitempty" json:"taskListID,omitempty" xml:"taskListID,omitempty"`
}

// TaskListStatusMultiStatusResponseBody is the type of the "taskList" service
// "TaskListStatus" endpoint HTTP response body.
type TaskListStatusMultiStatusResponseBody struct {
	// Unique taskList identifier.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Current status of the taskList
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Array of GroupStatus
	Groups []*GroupStatusResponseBody `form:"groups,omitempty" json:"groups,omitempty" xml:"groups,omitempty"`
}

// TaskListStatusCreatedResponseBody is the type of the "taskList" service
// "TaskListStatus" endpoint HTTP response body.
type TaskListStatusCreatedResponseBody struct {
	// Unique taskList identifier.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Current status of the taskList
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Array of GroupStatus
	Groups []*GroupStatusResponseBody `form:"groups,omitempty" json:"groups,omitempty" xml:"groups,omitempty"`
}

// TaskListStatusAcceptedResponseBody is the type of the "taskList" service
// "TaskListStatus" endpoint HTTP response body.
type TaskListStatusAcceptedResponseBody struct {
	// Unique taskList identifier.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Current status of the taskList
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Array of GroupStatus
	Groups []*GroupStatusResponseBody `form:"groups,omitempty" json:"groups,omitempty" xml:"groups,omitempty"`
}

// TaskListStatusOKResponseBody is the type of the "taskList" service
// "TaskListStatus" endpoint HTTP response body.
type TaskListStatusOKResponseBody struct {
	// Unique taskList identifier.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Current status of the taskList
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Array of GroupStatus
	Groups []*GroupStatusResponseBody `form:"groups,omitempty" json:"groups,omitempty" xml:"groups,omitempty"`
}

// GroupStatusResponseBody is used to define fields on response body types.
type GroupStatusResponseBody struct {
	// Unique group identifier.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Current status of the group
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Array of TaskStatus
	Tasks []*TaskStatusResponseBody `form:"tasks,omitempty" json:"tasks,omitempty" xml:"tasks,omitempty"`
}

// TaskStatusResponseBody is used to define fields on response body types.
type TaskStatusResponseBody struct {
	// Unique task identifier.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Current status of the task
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// NewCreateTaskListResultOK builds a "taskList" service "Create" endpoint
// result from a HTTP "OK" response.
func NewCreateTaskListResultOK(body *CreateResponseBody) *tasklist.CreateTaskListResult {
	v := &tasklist.CreateTaskListResult{
		TaskListID: *body.TaskListID,
	}

	return v
}

// NewTaskListStatusResponseMultiStatus builds a "taskList" service
// "TaskListStatus" endpoint result from a HTTP "MultiStatus" response.
func NewTaskListStatusResponseMultiStatus(body *TaskListStatusMultiStatusResponseBody) *tasklist.TaskListStatusResponse {
	v := &tasklist.TaskListStatusResponse{
		ID:     *body.ID,
		Status: *body.Status,
	}
	if body.Groups != nil {
		v.Groups = make([]*tasklist.GroupStatus, len(body.Groups))
		for i, val := range body.Groups {
			v.Groups[i] = unmarshalGroupStatusResponseBodyToTasklistGroupStatus(val)
		}
	}

	return v
}

// NewTaskListStatusResponseCreated builds a "taskList" service
// "TaskListStatus" endpoint result from a HTTP "Created" response.
func NewTaskListStatusResponseCreated(body *TaskListStatusCreatedResponseBody) *tasklist.TaskListStatusResponse {
	v := &tasklist.TaskListStatusResponse{
		ID:     *body.ID,
		Status: *body.Status,
	}
	if body.Groups != nil {
		v.Groups = make([]*tasklist.GroupStatus, len(body.Groups))
		for i, val := range body.Groups {
			v.Groups[i] = unmarshalGroupStatusResponseBodyToTasklistGroupStatus(val)
		}
	}

	return v
}

// NewTaskListStatusResponseAccepted builds a "taskList" service
// "TaskListStatus" endpoint result from a HTTP "Accepted" response.
func NewTaskListStatusResponseAccepted(body *TaskListStatusAcceptedResponseBody) *tasklist.TaskListStatusResponse {
	v := &tasklist.TaskListStatusResponse{
		ID:     *body.ID,
		Status: *body.Status,
	}
	if body.Groups != nil {
		v.Groups = make([]*tasklist.GroupStatus, len(body.Groups))
		for i, val := range body.Groups {
			v.Groups[i] = unmarshalGroupStatusResponseBodyToTasklistGroupStatus(val)
		}
	}

	return v
}

// NewTaskListStatusResponseOK builds a "taskList" service "TaskListStatus"
// endpoint result from a HTTP "OK" response.
func NewTaskListStatusResponseOK(body *TaskListStatusOKResponseBody) *tasklist.TaskListStatusResponse {
	v := &tasklist.TaskListStatusResponse{
		ID:     *body.ID,
		Status: *body.Status,
	}
	if body.Groups != nil {
		v.Groups = make([]*tasklist.GroupStatus, len(body.Groups))
		for i, val := range body.Groups {
			v.Groups[i] = unmarshalGroupStatusResponseBodyToTasklistGroupStatus(val)
		}
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.TaskListID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("taskListID", "body"))
	}
	return
}

// ValidateTaskListStatusMultiStatusResponseBody runs the validations defined
// on TaskListStatusMulti-StatusResponseBody
func ValidateTaskListStatusMultiStatusResponseBody(body *TaskListStatusMultiStatusResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	return
}

// ValidateTaskListStatusCreatedResponseBody runs the validations defined on
// TaskListStatusCreatedResponseBody
func ValidateTaskListStatusCreatedResponseBody(body *TaskListStatusCreatedResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	return
}

// ValidateTaskListStatusAcceptedResponseBody runs the validations defined on
// TaskListStatusAcceptedResponseBody
func ValidateTaskListStatusAcceptedResponseBody(body *TaskListStatusAcceptedResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	return
}

// ValidateTaskListStatusOKResponseBody runs the validations defined on
// TaskListStatusOKResponseBody
func ValidateTaskListStatusOKResponseBody(body *TaskListStatusOKResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	return
}
