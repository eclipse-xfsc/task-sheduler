// Code generated by goa v3.20.1, DO NOT EDIT.
//
// task HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/eclipse-xfsc/task-sheduler/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"

	task "github.com/eclipse-xfsc/task-sheduler/gen/task"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateResponse returns an encoder for responses returned by the task
// Create endpoint.
func EncodeCreateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*task.CreateTaskResult)
		enc := encoder(ctx, w)
		body := NewCreateResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateRequest returns a decoder for requests sent to the task Create
// endpoint.
func DecodeCreateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body any
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			taskName       string
			cacheNamespace *string
			cacheScope     *string

			params = mux.Vars(r)
		)
		taskName = params["taskName"]
		cacheNamespaceRaw := r.Header.Get("x-cache-namespace")
		if cacheNamespaceRaw != "" {
			cacheNamespace = &cacheNamespaceRaw
		}
		cacheScopeRaw := r.Header.Get("x-cache-scope")
		if cacheScopeRaw != "" {
			cacheScope = &cacheScopeRaw
		}
		payload := NewCreateTaskRequest(body, taskName, cacheNamespace, cacheScope)

		return payload, nil
	}
}

// EncodeTaskResultResponse returns an encoder for responses returned by the
// task TaskResult endpoint.
func EncodeTaskResultResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(any)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeTaskResultRequest returns a decoder for requests sent to the task
// TaskResult endpoint.
func DecodeTaskResultRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			taskID string

			params = mux.Vars(r)
		)
		taskID = params["taskID"]
		payload := NewTaskResultRequest(taskID)

		return payload, nil
	}
}
