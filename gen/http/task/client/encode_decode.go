// Code generated by goa v3.20.1, DO NOT EDIT.
//
// task HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/eclipse-xfsc/task-sheduler/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	task "github.com/eclipse-xfsc/task-sheduler/gen/task"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "task" service "Create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		taskName string
	)
	{
		p, ok := v.(*task.CreateTaskRequest)
		if !ok {
			return nil, goahttp.ErrInvalidType("task", "Create", "*task.CreateTaskRequest", v)
		}
		taskName = p.TaskName
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateTaskPath(taskName)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("task", "Create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the task Create
// server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*task.CreateTaskRequest)
		if !ok {
			return goahttp.ErrInvalidType("task", "Create", "*task.CreateTaskRequest", v)
		}
		if p.CacheNamespace != nil {
			head := *p.CacheNamespace
			req.Header.Set("x-cache-namespace", head)
		}
		if p.CacheScope != nil {
			head := *p.CacheScope
			req.Header.Set("x-cache-scope", head)
		}
		body := p.Data
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("task", "Create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the task
// Create endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("task", "Create", err)
			}
			err = ValidateCreateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("task", "Create", err)
			}
			res := NewCreateTaskResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("task", "Create", resp.StatusCode, string(body))
		}
	}
}

// BuildTaskResultRequest instantiates a HTTP request object with method and
// path set to call the "task" service "TaskResult" endpoint
func (c *Client) BuildTaskResultRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		taskID string
	)
	{
		p, ok := v.(*task.TaskResultRequest)
		if !ok {
			return nil, goahttp.ErrInvalidType("task", "TaskResult", "*task.TaskResultRequest", v)
		}
		taskID = p.TaskID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TaskResultTaskPath(taskID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("task", "TaskResult", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeTaskResultResponse returns a decoder for responses returned by the
// task TaskResult endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeTaskResultResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body any
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("task", "TaskResult", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("task", "TaskResult", resp.StatusCode, string(body))
		}
	}
}
