// Code generated by goa v3.20.1, DO NOT EDIT.
//
// task HTTP client CLI support package
//
// Command:
// $ goa gen github.com/eclipse-xfsc/task-sheduler/design

package client

import (
	"encoding/json"
	"fmt"

	task "github.com/eclipse-xfsc/task-sheduler/gen/task"
)

// BuildCreatePayload builds the payload for the task Create endpoint from CLI
// flags.
func BuildCreatePayload(taskCreateBody string, taskCreateTaskName string, taskCreateCacheNamespace string, taskCreateCacheScope string) (*task.CreateTaskRequest, error) {
	var err error
	var body any
	{
		err = json.Unmarshal([]byte(taskCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "\"Dolores atque error ab.\"")
		}
	}
	var taskName string
	{
		taskName = taskCreateTaskName
	}
	var cacheNamespace *string
	{
		if taskCreateCacheNamespace != "" {
			cacheNamespace = &taskCreateCacheNamespace
		}
	}
	var cacheScope *string
	{
		if taskCreateCacheScope != "" {
			cacheScope = &taskCreateCacheScope
		}
	}
	v := body
	res := &task.CreateTaskRequest{
		Data: v,
	}
	res.TaskName = taskName
	res.CacheNamespace = cacheNamespace
	res.CacheScope = cacheScope

	return res, nil
}

// BuildTaskResultPayload builds the payload for the task TaskResult endpoint
// from CLI flags.
func BuildTaskResultPayload(taskTaskResultTaskID string) (*task.TaskResultRequest, error) {
	var taskID string
	{
		taskID = taskTaskResultTaskID
	}
	v := &task.TaskResultRequest{}
	v.TaskID = taskID

	return v, nil
}
