// Code generated by goa v3.20.1, DO NOT EDIT.
//
// task service
//
// Command:
// $ goa gen github.com/eclipse-xfsc/task-sheduler/design

package task

import (
	"context"
)

// Task service provides endpoints to work with tasks.
type Service interface {
	// Create a task and put it in a queue for execution.
	Create(context.Context, *CreateTaskRequest) (res *CreateTaskResult, err error)
	// TaskResult retrieves task result from the Cache service.
	TaskResult(context.Context, *TaskResultRequest) (res any, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "task"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "task"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"Create", "TaskResult"}

// CreateTaskRequest is the payload type of the task service Create method.
type CreateTaskRequest struct {
	// Task name.
	TaskName string
	// Data contains JSON payload that will be used for task execution.
	Data any
	// Cache key namespace.
	CacheNamespace *string
	// Cache key scope.
	CacheScope *string
}

// CreateTaskResult is the result type of the task service Create method.
type CreateTaskResult struct {
	// Unique task identifier.
	TaskID string
}

// TaskResultRequest is the payload type of the task service TaskResult method.
type TaskResultRequest struct {
	// Unique task identifier.
	TaskID string
}
